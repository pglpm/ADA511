# [The prototype Optimal Predictor Machine makes decisions]{.red} {#sec-example-opm2}
{{< include macros.qmd >}}
{{< include macros_exchangeability.qmd >}}
{{< include macros_opm.qmd >}}

```{r}
#| echo: false
knitr::opts_knit$set(root.dir = "code/")
```

It is straightforward to implement decision-making in our prototype Optimal Predictor Machine. Let's continue with the example from [chapter @sec-example-opm1].

## Initialization and build of OPM agent


Load the necessary libraries and functions, including the `decide()` function, and train the agent as we did previously:

```{r}
library('extraDistr')
library('foreach')

source('tplotfunctions.R')
source('OPM_nominal.R')

options(repr.plot.width = 6*sqrt(2), repr.plot.height = 6)

opmall <- buildagent(metadata = 'meta_income_data_example.csv',
                     data = 'train-income_data_example.csv')
```

## Decision matrix

We use the targeted-advertisement scenario of [§@sec-max-exp-util-example], with the following utility matrix for the three ad-types:

```{r}
adutilities <- matrix(
    c(-1, 3,
        2, 2,
        3,-1),
    nrow = 3, byrow = TRUE,
    dimnames = list(ad_type = c('A','B','C'), income = c('<=50K', '>50K')))

print(adutilities)
```

## Example application

First let's apply the principle of maximal expected utility step-by-step.

Consider the example from [§@sec-max-exp-util-example]. The agent calculates the probabilities for the predictand `income` from the given predictor values:

```{r}
userpredictors <- list(workclass = 'Private', education = 'Bachelors',
                       marital_status = 'Never-married',
                       occupation = 'Prof-specialty',
                       relationship = 'Not-in-family', race = 'White',
                       sex = 'Female', native_country = 'United-States')

probs <- infer(agent = opmall, predictand = 'income',
               predictor = userpredictors)

print(probs)
```

Find the expected utilities of the three possible ad-types by matrix multiplication:

```{r}
adutilities %*% probs
```

And we see that ad-type `C` is optimal.

\

The [function `decide()`](https://github.com/pglpm/ADA511/blob/master/code/OPM_nominal.R) does the previous calculations. It outputs a list with elements:

- `EUs`: the expected utilities of the decisions, sorted from highest to lowest
- `optimal`: one decision unsystematically chosen among the optimal ones (if more than one)

```{r}
optimalad <- decide(utils = adutilities, probs = probs)

print(optimalad)
```

## Performance on test set

Finally let's apply our prototype agent to a test set, as a demonstration, and see how much utility it yields. This procedure will be discussed in more detail in [§@sec-eval-decision].

Load the test dataset; `M` is the number of test data:

```{r}
testdata <- read.csv('test-income_data_example.csv', header = TRUE,
    na.strings = '', stringsAsFactors = FALSE, tryLogical = FALSE)

M <- nrow(testdata)
```

We build the analogous of a "confusion matrix" ([§@sec-eval-decision]), telling us how many times the agent chooses the three ad-types for both income levels.

```{r}
confusionmatrix <- adutilities * 0L

## Use a for-loop for clarity
for(i in 1:M){
    userpredictors <- testdata[i, colnames(testdata) != 'income']
    probs <- infer(agent = opmall, predictand = 'income',
                   predictor = userpredictors)
    decision <- decide(utils = adutilities, probs = probs)$optimal
    trueincome <- testdata[i, 'income']

    confusionmatrix[decision, trueincome] <- confusionmatrix[decision, trueincome] + 1L
}

print(confusionmatrix)
```

The total utility yield is the total sum of the element-wise product of the `confusionmatrix` and the `adutilities` matrix

```{r}
totalyield <- sum(adutilities * confusionmatrix)
averageyield <- totalyield/M

cat('\nTotal yield =', totalyield, 
'\nAverage yield =', averageyield, '\n')
```

Note that:

- This yield is higher than what would be obtained by just choosing the neutral ad-type `B` for all test units (the average yield would be exactly `2`).

- This yield is also higher than would be obtained by always choosing ad-type `C`, targeting the majority of units, which have `income = '<=50K'`. This strategy would yield `2.00737`.


:::{.callout-caution}



- Try to use some common machine-learning algorithm to perform the same task of choosing between the three ad-types. Is it difficult? why?
    
	If you manage to do this, then compare the performances of the machine-learning algorithm and the `opmall` agent.

- Construct a scenario where the utility matrix is different depending on the `sex` predictor variate. Write a script to apply the `opmall` agent on the test set according to this new scenario.

:::

