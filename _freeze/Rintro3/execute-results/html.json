{
  "hash": "f9a06cc410f350f0f92a2a73068ec626",
  "result": {
    "engine": "knitr",
    "markdown": "# [Working with R, III]{.lightblue} {.unnumbered}\n::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0.5mu,\\mkern-0.5mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand*{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand*{\\sei}[1]{\\mathsfit{\\small #1}}\n<!-- \\providecommand{\\cat}[1]{\\texttt{\\small #1}} -->\n\\providecommand{\\cat}[1]{{\\small\\verb;#1;}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\nonscript\\mkern-3mu\\textrm{\\small#1}\\nonscript\\mkern-3mu}} -->\n\\providecommand*{\\mo}[1][=]{\\mathclose{}\\mathord{\\nonscript\\mkern0mu\\textrm{\\small#1}\\nonscript\\mkern0mu}\\mathopen{}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n\\providecommand*{\\e}{\\mathrm{e}}\n\\providecommand*{\\pu}{\\text{π}}\n\\providecommand*{\\RR}{\\mathbf{R}}\n\n$\\DeclarePairedDelimiter{\\set}{\\{}{\\}}$\n\\providecommand*{\\argmax}{\\operatorname{argmax}}\n<!-- \\DeclareMathOperator*{\\argmax}{argmax} -->\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n\nIn this R interlude we shall see how to represent tables of joint probability distributions for two quantities (\"contingency tables\"), how to generate sample points from discrete probability distributions, and how to create 2D scatter plots of such samples.\n\n\n::: {.cell}\n\n:::\n\n\n## Storing joint quantities in R {#sec-R-store-joint-quant}\n\nIn a previous example we had a quantity $\\mathrm{animal}$ with a domain having six possible values, and a probability distribution over them. The domain and the probability distributions were simply stored in two R variables: `animal` and `prob1`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal <- c('cat', 'dog', 'chicken', 'cow', 'pig', 'horse')\nprob1 <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\n```\n:::\n\n\nand we can do many things simply with these: draw plots, generate sample points, and so on.\n\\\n\nNow consider the example from [§@sec-repr-joint-prob], with two joint quantities: urgency $U$ and transportation $T$. The joint quantity $(U, T)$ has a domain with 2 × 3 possible values. [Table @tbl-urgent-arrival] reported a joint probability distribution for this joint quantity.\n\nHow can we store information about this joint quantity?\n\nThere are many way to do that. One way is to follow the example of the $\\mathrm{animal}$ quantity, and just create two R variables: one containing all six possible values of $(U, T)$, and one containing the six values of the joint probability distribution.\n\nHere we follow another, slightly more elegant way, which will be implicitly used in later chapters.\n\nFirst we can store the quantities' names and their domains as an R [`list()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/list.html). It's actually easier to show this with a concrete example than by wordy explanations. Take the quantity $U$ with domain $\\set{\\texttt{urgent}, \\texttt{non-urgent}}$, and the quantity $T$ with domain $\\set{\\texttt{ambulance}, \\texttt{helicopter}, \\texttt{other}}$. We store the joint quantity $(U, T)$ as the list `UT`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUT <- list(\n    U = c('urgent', 'non-urgent'),\n    T = c('ambulance', 'helicopter', 'other')\n)\n```\n:::\n\n\nEasy! You clearly understand how this could be generalized to three or more quantities with discrete domains. In fact, we could also use this representation for just one quantity. Each domain does not need to consist in character string; it could also be numeric. We can use any quantity names we like, but if they contain special characters such as spaces, hyphens `-`, and some others, then we must write them within back-ticks `` `...` ``, for instance `` `farm-animal` ``.\n\nThe individual domains stored in `UT` can be accessed by using the `$` operator followed by the quantity's name, as illustrated in this example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUT$U\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"urgent\"     \"non-urgent\"\n```\n\n\n:::\n\n```{.r .cell-code}\nUT$T\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ambulance\"  \"helicopter\" \"other\"     \n```\n\n\n:::\n:::\n\n\\\n\nOnce we have the variable `UT` containing name and domain of each quantity, we can also get the domain for the joint quantity by using the R function\n[`expand.grid()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/expand.grid.html) with `UT` as argument. We must also add the argument `stringsAsFactors = FALSE` owing to how we treat some quantities in these notes; we won't explain its meaning or reason.\n\nLet's generate the domain of $(U, T)$ and store it in the variable `UTdomain`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTdomain <- expand.grid(UT, stringsAsFactors = FALSE)\n```\n:::\n\n\nThe resulting object `UTdomain` is a so-called [`data.frame`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/data.frame.html). Let's simply print it to understand how it looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTdomain\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           U          T\n1     urgent  ambulance\n2 non-urgent  ambulance\n3     urgent helicopter\n4 non-urgent helicopter\n5     urgent      other\n6 non-urgent      other\n```\n\n\n:::\n:::\n\n\nIt has a column for each quantity, and each row shows a combination of values for those quantities. The numbers you see in front of each row are simply printed as reference. The total number of joint values, equal to the number of rows, can be obtained with the [`nrow()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/nrow.html) function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(UTdomain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nWe can access any joint value, say the 3rd one, by using square brackets as follows; note the comma:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTdomain[3, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       U          T\n3 urgent helicopter\n```\n\n\n:::\n:::\n\n\n\\\n\n## Storing joint probability distributions in R {#sec-R-store-joint-prob}\n\nHow can we store a joint probability distribution, like that in [Table @tbl-urgent-arrival], for a joint quantity such as `UT`? There are many ways to do this as well. Let's see three.\n\n(1) We can simply create a variable that contains all six probability values. We must make sure that the ordering correspond to that of `UTdomain`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTprob1 <- c(0.11, 0.17, 0.04, 0.01, 0.03, 0.64)\n```\n:::\n\n\n(check that the order above is correct by comparing with [Table @tbl-urgent-arrival] and `UTdomain`).\n\\\n\n(2) We can add the probability values as an additional column in the `UTdomain` object; this is done with `cbind()` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTprob2 <- cbind(\n    probability = c(0.11, 0.17, 0.04, 0.01, 0.03, 0.64),\n    UTdomain\n)\n```\n:::\n\n\nTake a look at how the `UTprob2` object looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTprob2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  probability          U          T\n1        0.11     urgent  ambulance\n2        0.17 non-urgent  ambulance\n3        0.04     urgent helicopter\n4        0.01 non-urgent helicopter\n5        0.03     urgent      other\n6        0.64 non-urgent      other\n```\n\n\n:::\n:::\n\n\\\n\n(3) We could use a representation that allows us to read the probabilities just like in [Table @tbl-urgent-arrival]. In R this is easily done with the built-in [`array()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/array.html) function. This function has the following arguments which we use to store our information:\n\n- `data =`: the probabilities values (again in appropriate order).\n\n- `dim =`: the sizes of the domains of the joint quantities. In our case they are $3$ and $2$.\n\n- `dimnames =`: The list representing the joint quantity, `UT` in our case.\n\nLet's call the resulting object `UTtable`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTtable <- array(\n    data = c(0.11, 0.17, 0.04, 0.01, 0.03, 0.64),\n    dim = c(2, 3),\n    dimnames = UT\n)\n```\n:::\n\n\nHere is how the `UTtable` object looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTtable\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            T\nU            ambulance helicopter other\n  urgent          0.11       0.04  0.03\n  non-urgent      0.17       0.01  0.64\n```\n\n\n:::\n:::\n\n\nVery neat to read.\n\n\\\n\n\n## Sampling from discrete joint probability distributions in R {#sec-R-sample-joint}\n\nOur next task is to graphically represent the probability distribution of a joint quantity (for the case of two quantities). Here we focus on [scatter-plots representations](joint_probability.html#scatter-plots-and-similar].\n\nAs usual, in order to represent a probability distribution as a scatterplot we first need to generate some sample points from it.\n\nThe easiest way to do this in the case of a joint quantity is to numerically index its possible values, for instance with integers, and then to draw samples of these indices instead. We can then retrieve the quantity values corresponding to the sampled indices. The sampling is done again with the `sample()' function.\n\nAll this procedure is more easily explained by a concrete example. Let's generate 100 samples from the joint domain of the quantity $(U, T)$, and then print the first ten:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindexsamples <- sample(nrow(UTdomain), size = 100, prob = UTtable, replace = TRUE)\n\n## print first ten\nindexsamples[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 6 2 6 6 2 6 6 6 2 1\n```\n\n\n:::\n:::\n\n\nWhen we printed the `UTdomain` object in the previous section, an indexing from 1 to 6 had already been done for us.\n\nWe can now prepare a sequence of 100 samples of joint values, using the index samples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTsamples <- UTdomain[indexsamples, ]\n```\n:::\n\n\nNote the syntax within the square brackets: we are saying to take the rows -- possibly with repetitions -- listed in `indexsamples`; the comma followed by nothing means to leave the columns as they are. Check the first ten rows of `UTsamples`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUTsamples[1:10, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             U         T\n6   non-urgent     other\n2   non-urgent ambulance\n6.1 non-urgent     other\n6.2 non-urgent     other\n2.1 non-urgent ambulance\n6.3 non-urgent     other\n6.4 non-urgent     other\n6.5 non-urgent     other\n2.2 non-urgent ambulance\n1       urgent ambulance\n```\n\n\n:::\n:::\n\n\nnote how the most probable value, $(\\texttt{non-urgent}, \\texttt{other})$ appears more often. You may also notice the curious indexing on the left, done automatically by R: the number after the period `.` tells us the numbers of new repetitions of that value. For instance `6.2` tells that that's the 3rd time the 6th value appears in the list.\n\n\n## Plotting joint probability distributions in R {#sec-R-plot-joint}\n\nWe can finally generate a scatterplot with the sample points just generated. It's easily done with the `flexiplot()` function discussed in our [previous R interlude](Rintro2.html). We extract the $U$-values by using the `$U` operator, and give them as y-axis values. Similarly for the $T$-values, using `$T`, as x-axis values. It's important to use the `xjitter = TRUE` and `yitter = TRUE` arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## load the function\nsource('tplotfunctions.R')\n\nflexiplot(\n    x = UTsamples$T,\n    y = UTsamples$U,\n    xjitter = TRUE,\n    yjitter = TRUE,\n    xlab = 'T', ylab = 'U'\n)\n```\n\n::: {.cell-output-display}\n![](Rintro3_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nYou notice that the ordering of the $U$- and $T$-values on the axes does not match the one we chose initially. To adjust that, we can explicitly specify the `xdomain =` and `ydomain =` arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## load the function\nsource('tplotfunctions.R')\n\nflexiplot(\n    x = UTsamples$T,\n    y = UTsamples$U,\n    xjitter = TRUE,\n    yjitter = TRUE,\n    xlab = 'T', ylab = 'U',\n    xdomain = UT$T,\n    ydomain = UT$U\n)\n```\n\n::: {.cell-output-display}\n![](Rintro3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\\\n\nThe same procedure can be used to draw the scatterplot of a joint probability density. As an example, let's first generate 10 000 sample points for the joint quantity $(X, Y)$, where both $X$ and $Y$ are continuous, and store them in a `data.frame`. Don't pay too much attention to how the points are generated, as this is a very special case. We then show the first ten samples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXYsamples <- data.frame(X = rnorm(n = 10000), Y = rcauchy(n = 10000))\n\nXYsamples[1:10, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            X           Y\n1   0.4672127    0.787657\n2  -0.4590422   -1.876990\n3   0.1065156   14.240633\n4   0.7055754   -2.502529\n5   0.0326021   -0.437397\n6   0.9303786 -175.036602\n7  -2.2043263   -4.469357\n8  -1.2585736   -2.208824\n9  -1.1397237   -1.670019\n10  0.5606012  -18.207065\n```\n\n\n:::\n:::\n\n\nNow we draw the scatter plot with the points above. With continuous quantities we don't need to use the `...jitter = ` arguments. It is often useful to state the x- and y-ranges of the plot explicitly with `xlim =` and `ylim =`; note that this means that some sample points may end up outside the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflexiplot(\n    x = XYsamples$X, y = XYsamples$Y,\n    type = 'p', pch = '.',\n    xlim = c(-4, 4), ylim = c(-4, 4)\n)\n```\n\n::: {.cell-output-display}\n![](Rintro3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "Rintro3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}