{
  "hash": "63c5ec5968b01bacdc756666f8186560",
  "result": {
    "engine": "knitr",
    "markdown": "# [Working with R, II]{.lightblue} {.unnumbered}\n::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0.5mu,\\mkern-0.5mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand*{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand*{\\sei}[1]{\\mathsfit{\\small #1}}\n<!-- \\providecommand{\\cat}[1]{\\texttt{\\small #1}} -->\n\\providecommand{\\cat}[1]{{\\small\\verb;#1;}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\nonscript\\mkern-3mu\\textrm{\\small#1}\\nonscript\\mkern-3mu}} -->\n\\providecommand*{\\mo}[1][=]{\\mathclose{}\\mathord{\\nonscript\\mkern0mu\\textrm{\\small#1}\\nonscript\\mkern0mu}\\mathopen{}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n\\providecommand*{\\e}{\\mathrm{e}}\n\\providecommand*{\\pu}{\\text{π}}\n\\providecommand*{\\RR}{\\mathbf{R}}\n\n$\\DeclarePairedDelimiter{\\set}{\\{}{\\}}$\n\\providecommand*{\\argmax}{\\operatorname{argmax}}\n<!-- \\DeclareMathOperator*{\\argmax}{argmax} -->\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n\nR has a wide range of basic plotting functions, and in addition to them there are many plotting libraries. Here we shall see examples of how to create the kinds of plot discussed in [chapter @sec-prob-distribs], using basic R functions and custom functions used in these notes.\n\n\n::: {.cell}\n\n:::\n\n\n## Plotting pairs of values in R {#sec-R-plotting-pair}\n\nA very simple kind of plot is the one where we plot a sequence of values against another sequence *of the same length*, interpreting the first as x-axis and the second as y-axis. This can be done with the base R function [`plot()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/plot.html). Here we consider sequences `a` and `b`, with six values each:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 2, 3, 4, 5, 6)\nb <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\n\nplot(x = a, y = b)\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nYou notice that the names of the variables appear automatically on the axes, and the pairs of points are represented by small, empty circles. If we want to join the points with `l`ines we can use the `type = 'l'` argument; with `type = 'b'` we get both circles and lines. The `l`ine `w`i`d`th is controlled by the `lwd =` argument, and the `l`ine `ty`pe (solid, dashed, dotted, and so on) by the `lty =` argument. The colour by `col =`. We can also change the axes' labels with `xlab =` and `ylab =`, and the ranges of the two axes with `xlim =` and `ylim =`. Let's see two examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x = a, y = b,\n    type = 'l',\n    lwd = 1, lty = 1, col = 1,\n    xlab = 'quantity A', ylab = 'quantity B',\n    xlim = c(-3, 7), ylim = c(-1, 1))\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(x = a, y = b,\n    type = 'b',\n    lwd = 3, lty = 2, col = 2,\n    xlab = 'quantity A', ylab = 'quantity B',\n    xlim = c(0.5, 6.5), ylim = c(0, 0.5))\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\nNote that the sum of `b` values is 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\nso `b` could be a discrete probability distribution for the quantity `a`.\n\n### A custom plot function\n\nIf the quantity `a` is non-numeric, for instance a sequence of character strings, then we must first somehow convert it to numbers in order to use `plot()`, otherwise we get an error.\n\nIn these notes we use the custom function `flexiplot()`, which takes care of such conversions internally. We can load it from the file [`tplotfunctions.R`](https://github.com/pglpm/ADA511/blob/master/code/tplotfunctions.R), which you should have already downloaded:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource('tplotfunctions.R')\n```\n:::\n\n\nConsider a quantity `animal` that could be one of six possible animals, and  the distribution of probability over them, assigned to a variable `prob`. With `flexiplot()` we can plot the probability distribution as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal <- c('cat', 'dog', 'chicken', 'cow', 'pig', 'horse')\nprob <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\n\nflexiplot(x = animal, y = prob, type = 'b', ylim = c(0, NA))\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNote how the animal names appear in the x-axis, in the order specified. The range specification `ylim = c(0, NA)` (not available for `plot()`) says that the lower range should be $0$, and the upper range should be the maximum available among the y-axis values.\n\\\n\nSuppose we need to plot two different probability distributions (or two different sets of y-values more generally), stored in the variables `prob1` and `prob2`, for the same x-values, as in the last plot of [§@sec-discr-prob-distr]. We can do this by binding them together into an array with two columns with the [`cbind()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/cbind.html) function, and then giving this array as the `y =` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob1 <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\nprob2 <- c(0.2, 0.6, 0.05, 0.04, 0.01, 0.1)\n\nflexiplot(x = animal, y = cbind(prob1, prob2),\n    type = 'b', ylim = c(0, NA),\n    ylab = 'two probability distributions')\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWe could also issue two separate `flexiplot()` commands, giving the argument `add = TRUE` to the second. But in this case we must make sure to give the correct y-range already in the first plot, and we must also explicitly use different colours `col =` and line types `lty =`. Check for instance what would happen for the case above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Plot for prob1\nflexiplot(x = animal, y = prob1,\n    type = 'b', ylim = c(0, NA),\n    ylab = 'two probability distributions')\n\n## Plot for prob2\nflexiplot(x = animal, y = prob2,\n    type = 'b', col = 2, lty = 2,\n    add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nYou see that the curve in the second plot was partly cut off, because the first plot adapted the y-range to the first curve only.\n\n\\\n\n## Plotting probability densities in R {#sec-R-plotting-densities}\n\nIf $X$ is a continuous quantity, we know the mathematical formula for a probability density over its domain, then the density can be plotted as pairs of values, as we did above. We need to generate many values of $X$ in the range of interest, and calculate the probability density for each from the mathematical formula.\n\nSuppose for instance that $X$ has all real numbers as its domain, and probability density $\\p(X\\|I)$ given by a [Gaussian, or \"normal\", distribution](https://mathworld.wolfram.com/NormalDistribution.html) with mean $5$ and standard deviation $3$. Its mathematical formula is\n\n$$\n\\p(X\\mo x \\| I) = \\frac{1}{\\sqrt{2\\pi\\cdot 3^2}}\\,\n\\exp\\biggl[\n-\\frac{(x - 5)^2}{2\\cdot 3^2}\n\\biggr]\\,.\n$$\n\nWe'd like to visualize this probability density between $X\\mo -7$ and $X\\mo 10$. Then we proceed as follows:\n\n- Generate a large number of values, say hundreds, for $X$ from $-5$ to $10$. The number of values to generate depends on the resolution at which the final plot will be shown.\n    \n    In this example we'll generate 257 values using the function [`seq()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/seq.html) with argument `length =`, and store them in the variable `x`.\n\n- Calculate the probability density for each $X$ value generated. In R this is often easy, as we can give the whole sequence of numbers to a mathematical function.\n    \n    In R, the formula for the Gaussian distribution is given by the function [`dnorm()`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/Normal.html) with arguments `mean =` and `sd =`.\n\n- Plot the pairs of values generated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(from = -7, to = 10, length = 257)\n\np <- dnorm(x, mean = 5, sd = 3)\n\nflexiplot(x = x, y = p, ylim = c(0, NA), ylab = 'p(x | I)')\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIf we need to display more densities in the same plot we can proceed as described in the previous section.\n\nR has built-in functions for many common probability densities; they all have the form `d...()`, take a look at the [index](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/00Index.html). Packages like [**extraDistr**](https://cran.r-project.org/package=extraDistr) provide even more densities.\n\n\n\\\n\n## 1D scatter plots in R {#sec-R-1Dscatter}\n\nWhat if we want to represent a probability density as a scatter plot, as was done in [§@sec-represent-dens]?\n\nFirst of all we need to generate points that reflect the probability density. R has built-in functions to generate points for many common densities; they have the form `r...()` corresponding to the `d...()` one. For instance, to generate 100 points from a Gaussian density we can use `rnorm()` with arguments `n =` for the number of points, and `mean =`, `sd =` for the mean and standard deviation. Packages like [**extraDistr**](https://cran.r-project.org/package=extraDistr) also provide point generators.\n\nHow many points should we generate? The answer is heavily context- and problem-dependent. Too few points, say a dozen, may not give any clear idea of the density. Too many, say thousands, may end up producing a compact blob where no density differences are discernible. It also depends on the structure of the probability density itself. Around a 100 points or so may be a good starting point. But if you need to explore regions of the domain where the probability density is low, then you'll need more points.\n\nLet's generate 200 points for the Gaussian density of the previous example, storing them in the `points` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints <- rnorm(n = 200, mean = 5, sd = 3)\n```\n:::\n\n\nThen we need to display these points in a graph.\n\nR has the built-in function [`rug()`](https://stat.ethz.ch/R-manual/R-patched/library/graphics/html/rug.html) to display the points as thin vertical lines on the x-axis. The argument `ticksize =` specifies the length of these lines: `1` means the whole plot's height, `0.5` half the plot's height, and so on. You can also choose colour and line type and width with the usual `col =`, `lty =`, `lwd =` arguments.\n\nLet's use this function to add to the previous plot the points we just generated (we also redraw the plot):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Redraw the plot\nflexiplot(x = x, y = p, ylim = c(0, NA), ylab = 'p(x | I)')\n\nrug(points, ticksize = 0.25, col = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in rug(points, ticksize = 0.25, col = 2): some values will be clipped\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Redraw the plot\nflexiplot(x = points, type = 'p', xlim = c(-7, 10), pch = '|')\nrug(points, ticksize = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in rug(points, ticksize = 0.5): some values will be clipped\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nflexiplot(x = rnorm(n = 10000, mean = 5, sd = 3), type = 'p', pch = '.', xlim = c(-7, 10), yjitter = TRUE)\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "Rintro2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}