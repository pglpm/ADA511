{
  "hash": "0a96a0e59180ed501a8b35e20f4143da",
  "result": {
    "engine": "knitr",
    "markdown": "# [Working with R, II]{.lightblue} {.unnumbered}\n::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0.5mu,\\mkern-0.5mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand*{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand*{\\sei}[1]{\\mathsfit{\\small #1}}\n<!-- \\providecommand{\\cat}[1]{\\texttt{\\small #1}} -->\n\\providecommand{\\cat}[1]{{\\small\\verb;#1;}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\nonscript\\mkern-3mu\\textrm{\\small#1}\\nonscript\\mkern-3mu}} -->\n\\providecommand*{\\mo}[1][=]{\\mathclose{}\\mathord{\\nonscript\\mkern0mu\\textrm{\\small#1}\\nonscript\\mkern0mu}\\mathopen{}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n\\providecommand*{\\e}{\\mathrm{e}}\n\\providecommand*{\\pu}{\\text{π}}\n\\providecommand*{\\RR}{\\mathbf{R}}\n\n$\\DeclarePairedDelimiter{\\set}{\\{}{\\}}$\n\\providecommand*{\\argmax}{\\operatorname{argmax}}\n<!-- \\DeclareMathOperator*{\\argmax}{argmax} -->\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n\nR has a wide range of basic plotting functions, and in addition to them there are many plotting libraries. Here we shall see examples of how to create the kinds of plot discussed in [chapter @sec-prob-distribs], using basic R functions and custom functions used in these notes.\n\n\n::: {.cell}\n\n:::\n\n\n## Plotting pairs of values in R {#sec-R-plotting-pair}\n\nA very simple kind of plot is the one where we plot a sequence of values against another sequence *of the same length*, interpreting the first as x-axis and the second as y-axis. This can be done with the base R function [`plot()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/plot.html). Here we consider sequences `a` and `b`, with six values each:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 2, 3, 4, 5, 6)\nb <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\n\nplot(x = a, y = b)\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nYou notice that the names of the variables appear automatically on the axes, and the pairs of points are represented by small, empty circles. If we want to join the points with `l`ines we can use the `type = 'l'` argument; with `type = 'b'` we get both circles and lines. The `l`ine `w`i`d`th is controlled by the `lwd =` argument, and the `l`ine `ty`pe (solid, dashed, dotted, and so on) by the `lty =` argument. The colour by `col =`. We can also change the axes' labels with `xlab =` and `ylab =`, and the ranges of the two axes with `xlim =` and `ylim =`. Let's see two examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x = a, y = b,\n    type = 'l',\n    lwd = 1, lty = 1, col = 1,\n    xlab = 'quantity A', ylab = 'quantity B',\n    xlim = c(-3, 7), ylim = c(-1, 1))\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(x = a, y = b,\n    type = 'b',\n    lwd = 3, lty = 2, col = 2,\n    xlab = 'quantity A', ylab = 'quantity B',\n    xlim = c(0.5, 6.5), ylim = c(0, 0.5))\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\nNote that the sum of `b` values is 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\nso `b` could be a discrete probability distribution for the quantity `a`.\n\n### A custom plot function\n\nIf the quantity `a` is non-numeric, for instance a sequence of character strings, then we must first somehow convert it to numbers in order to use `plot()`, otherwise we get an error.\n\nIn these notes we use the custom function `tflexiplot()`, which takes care of such conversions internally. We can load it from the file [`tplotfunctions.R`](https://github.com/pglpm/ADA511/blob/master/code/tplotfunctions.R), which you should have already downloaded:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource('tplotfunctions.R')\n```\n:::\n\n\nConsider a quantity `animal` that could be one of six possible animals, and  the distribution of probability over them, assigned to a variable `prob`. With `tflexiplot()` we can plot the probability distribution as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal <- c('cat', 'dog', 'chicken', 'cow', 'pig', 'horse')\nprob <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\n\ntflexiplot(x = animal, y = prob, type = 'b', ylim = c(0, NA))\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNote how the animal names appear in the x-axis, in the order specified. The range specification `ylim = c(0, NA)` (not available for `plot()`) says that the lower range should be $0$, and the upper range should be the maximum available among the y-axis values.\n\\\n\nSuppose we need to plot two different probability distributions (or two different sets of y-values more generally), stored in the variables `prob1` and `prob2`, for the same x-values, as in the last plot of [§.@sec-discr-prob-distr]. We can do this by binding them together into an array with two columns with the [`cbind()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/cbind.html) function, and then giving this array as the `y =` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob1 <- c(0.05, 0.3, 0.4, 0.2, 0.03, 0.02)\nprob2 <- c(0.2, 0.6, 0.05, 0.04, 0.01, 0.1)\n\ntflexiplot(x = animal, y = cbind(prob1, prob2),\n    type = 'b', ylim = c(0, NA),\n    ylab = 'two probability distributions')\n```\n\n::: {.cell-output-display}\n![](Rintro2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n",
    "supporting": [
      "Rintro2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}