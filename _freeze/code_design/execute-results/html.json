{
  "hash": "cb2801118e7e8aedca364bb1ca7fe67e",
  "result": {
    "engine": "knitr",
    "markdown": "# [Implementing an OPM]{.red} {#sec-code-design}\n::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0.5mu,\\mkern-0.5mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand*{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand*{\\sei}[1]{\\mathsfit{\\small #1}}\n<!-- \\providecommand{\\cat}[1]{\\texttt{\\small #1}} -->\n\\providecommand{\\cat}[1]{{\\small\\verb;#1;}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\nonscript\\mkern-3mu\\textrm{\\small#1}\\nonscript\\mkern-3mu}} -->\n\\providecommand*{\\mo}[1][=]{\\mathclose{}\\mathord{\\nonscript\\mkern0mu\\textrm{\\small#1}\\nonscript\\mkern0mu}\\mathopen{}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n\\providecommand*{\\e}{\\mathrm{e}}\n\\providecommand*{\\pu}{\\text{π}}\n\\providecommand*{\\RR}{\\mathbf{R}}\n\n$\\DeclarePairedDelimiter{\\set}{\\{}{\\}}$\n\\providecommand*{\\argmax}{\\operatorname{argmax}}\n<!-- \\DeclareMathOperator*{\\argmax}{argmax} -->\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n::: {.hidden}\n\\providecommand*{\\yon}{{\\green\\cat{on}}}\n\\providecommand*{\\yof}{{\\red\\cat{off}}}\n\\providecommand*{\\yy}{{\\lblue\\cat{Y}}}\n\\providecommand*{\\yn}{{\\yellow\\cat{N}}}\n\\providecommand{\\ypl}{{\\green\\cat{+}}}\n\\providecommand{\\ymi}{{\\red\\cat{-}}}\n\\providecommand{\\ypa}{{\\green\\cat{pass}}}\n\\providecommand{\\yfa}{{\\red\\cat{fail}}}\n<!-- \\providecommand{\\ypl}{\\mathord{\\green\\boldsymbol{+}}} -->\n<!-- \\providecommand{\\ymi}{\\mathord{\\red\\boldsymbol{-}}} -->\n\\providecommand{\\hi}{{\\green\\cat{high}}}\n\\providecommand{\\me}{{\\yellow\\cat{medium}}}\n\\providecommand{\\lo}{{\\red\\cat{low}}}\n\\providecommand*{\\yJ}{\\se{J}}\n\\providecommand{\\yva}{{\\lblue-1}}\n\\providecommand{\\yvb}{{\\midgrey0}}\n\\providecommand{\\yvc}{{\\yellow1}}\n\\providecommand*{\\yK}{\\se{K}}\n\\providecommand*{\\yL}{\\se{L}}\n\n\\providecommand*{\\yR}{R}\n\n\\providecommand*{\\bZ}{{\\blue Z}}\n\\providecommand*{\\bz}{{\\blue z}}\n\\providecommand*{\\rY}{{\\red Y}}\n\\providecommand*{\\bY}{{\\blue Y}}\n\\providecommand*{\\ry}{{\\red y}}\n\\providecommand*{\\gX}{{\\green X}}\n\\providecommand*{\\bX}{{\\blue X}}\n\\providecommand*{\\gx}{{\\green x}}\n\\providecommand*{\\vf}{\\vec{f}}\n<!-- \\providecommand*{\\if}{\\se{F}} -->\n\\providecommand*{\\yut}{\\se{K}_{\\textsf{3}}}\n\\providecommand*{\\yul}{\\se{K}}\n\n\\providecommand*{\\bA}{{\\blue A}}\n\\providecommand*{\\bB}{{\\blue B}}\n\\providecommand*{\\bC}{{\\blue C}}\n\n\n\\providecommand*{\\vfa}{\\vf'}\n\\providecommand*{\\vfb}{\\vf''}\n\n:::\n\n\n::: {.hidden}\n\n\\providecommand*{\\data}{\\se{\\green data}}\n\\providecommand*{\\yD}{\\se{I}_{\\textrm{d}}}\n\\providecommand*{\\ya}{k}\n\\providecommand*{\\yb}{l}\n\\providecommand*{\\amin}{\\ya_{\\text{mi}}}\n\\providecommand*{\\amax}{\\ya_{\\text{ma}}}\n\\providecommand*{\\aux}{\\operatorname{aux}}\n\n:::\n\n\nWe now try to build up a real prototype AI agent from basic principles, using the formulae summarized in [ch. @sec-summary-formulae] and in the previous chapter. By design, this agent is as close to optimal as theoretically possible; so let's call it an\n\n![](optimal_predictor_machine.png){width=75%}\n\nor *OPM* for short.\n\nBefore starting, let's agree on some terminology so as not to get confused in the discussion below.\n\n- We shall call [*task*]{.blue} a *repetitive* inference problem with a specified set of units and variates. For instance, a task could be the consecutive prediction of the urgency of several incoming patients, given their mean of transportation.\n- We shall call [*application*]{.blue} or [*instance*]{.blue} of the task a *single* inference about a new unit, for example one new incoming patient.\n\n\\\n\n## Desired characteristics of the OPM {#sec-characteristics-opm}\n\nWe design our Optimal Predictor Machine with the following specific characteristics:\n\n- It handles variates of *nominal* type ([§@sec-basic-types]).\n\n- It handles inferences and decisions about approximately infinite populations, and its beliefs about the population are *exchangeable* ([ch. @sec-exchangeable-beliefs]).\n\n- Its initial beliefs about the population frequencies are represented by a *Dirichlet-mixture distribution* ([ch. @sec-dirichlet-mix]).\n\n- Before deployment, it learns from a set of $N$ units.\n\\\n\n### Example of what kind of agent we want\n\nLet's give an example of what we want our agent to be able to do. Suppose we have a population having three nominal variates $Z = (Y \\and X \\and W)$.\\  Abbreviate the set of $N$ training data as\n\n$\\data \\defd\n( Z_{N}\\mo z_{N} \\and \\dotsb \\and\nZ_{2}\\mo z_{2} \\and\nZ_{1}\\mo z_{1} )$    \n\n:::{.column-margin}\nRecall that $Z$ denotes all (nominal) variates of the population\n:::\n\nwhere $z_N, \\dotsc, z_2, z_1$ are specific values, stored in some training dataset. To simplify things, we assume that no values are missing.\n\nWe want an agent that can draw inferences like the following ones, as often as required:\n\n- $P(X\\mo\\dotso\\|\\data \\and \\yD)$,\\  $P(Y\\mo\\dotso\\|\\data \\and \\yD)$,\\ etc.: inference about a predictand variate, without knowledge of any predictors.\n\n- $P(Y\\mo\\dotso \\and W\\mo\\dotso\\|\\data \\and \\yD)$: same but for any two predictand variates.\n\n- $P(Y\\mo\\dotso \\and X\\mo\\dotso \\and W\\mo\\dotso\\|\\data \\and \\yD)$: same but for all three variates.\n\n- $P(X\\mo\\dotso\\|Y\\mo\\dotso \\and \\data \\and \\yD)$: inference about any one predictand variate, given information about one predictor variate.\n\n- $P(X\\mo\\dotso\\| Y\\mo\\dotso \\and W\\mo\\dotso \\and\\data \\and  \\yD)$: same, but given information about any pair of predictors.\n\n- $P(Y\\mo\\dotso \\and W\\mo\\dotso\\|X\\mo\\dotso \\and \\data \\and \\yD)$: inference about any two predictand variates, given information about one predictor.\n\nNote that *we are not fixing beforehand which variates are predictands and which are predictors*. Once the agent has learnt from the training data, we want to be able to change *on the fly, at each new application*, what the predictands are, and what the predictors are (if any).\n\nPause for a second and *ponder about the flexibility that we are requesting from our prototype agent!* Consider that virtually all present-day machine-learning algorithms only work one way: a machine-learning algorithm designed to guess a label from some features cannot guess features from a label. Will we really manage to build an agent with the amazing versatility illustrated above?\n\n\n## Computations needed and mathematical challenges in the code {#sec-code-computations}\n\nThe examples above of requested inferences show that the OPM agent must essentially use formulae (@eq-dmagent-y)--(@eq-dmagent-aux) from [§@sec-formulae-dirmix], which we repeat here:\n\n::::{.callout-note}\n##  \n\n$\\P(Y\\mo y \\| \\data, \\yD)\n=\n\\sum_{\\ya = \\amin}^{\\amax}\n\\Bigl(\\tfrac{2^\\ya}{M_Y} + \\#y\\Bigr)\n\\cdot \\aux(\\ya)$   (@eq-dmagent-y)\n\n$\\P(Y\\mo y \\| X\\mo x \\and \\data, \\yD)\n=\n\\frac{\n\\sum_{\\ya = \\amin}^{\\amax}\n\\Bigl(\\tfrac{2^\\ya}{M_Y \\cdot M_X} + \\#(y,x)\\Bigr)\n\\cdot \\aux(\\ya)\n}{\n\\sum_{y}\\sum_{\\ya = \\amin}^{\\amax}\n\\Bigl(\\tfrac{2^\\ya}{M_Y \\cdot M_X} + \\#(y,x)\\Bigr)\n\\cdot \\aux(\\ya)\n}$   (@eq-dmagent-yx)\n\nwith\\ \\ $\\aux(\\ya)\n\\defd\n\\frac{\n\\frac{\n\\prod_{x,y,w} \\Bigl(\\frac{2^{\\ya}}{M} + \\#(x,y,w) - 1\\Bigr)!\n}{\n\\bigl(2^{\\ya} + N -1 \\bigr)!\n}\n\\cdot\n\\frac{\n\\bigl(2^{\\ya} -1 \\bigr)!\n}{\n{\\Bigl(\\frac{2^{\\ya}}{M} - 1\\Bigr)!}^M\n}\n}{\n\\sum_{\\yb = \\amin}^{\\amax}\n\\frac{\n\\prod_{x,y,w} \\Bigl(\\frac{2^{\\yb}}{M} + \\#(x,y,w) - 1\\Bigr)!\n}{\n\\bigl(2^{\\yb} + N \\bigr)!\n}\n\\cdot\n\\frac{\n\\bigl(2^{\\yb} -1 \\bigr)!\n}{\n{\\Bigl(\\frac{2^{\\yb}}{M} - 1\\Bigr)!}^M\n}\n}$   (@eq-dmagent-aux)\n::::\n\nThe values of $\\aux(\\ya)$ can be calculated just once, when the OPM agent is built, and stored. Subsequently the agent will draw inferences by using (@eq-dmagent-y) or (@eq-dmagent-yx) as needed. To use those formulae, the agent needs to store the counts $\\#(x,y,w,\\dotsc)$, which it found in the training data, for all combinations of values $x,y,w,\\dotsc$.\n\\\n\nThis kind of storage and computation could be implemented in a straightforward way if we had unlimited storage and computation precision. But in a real implementation we must face the following difficulties:\n\n[{{< fa circle-exclamation >}} Finite precision]{.red}\n: Owing to finite precision, the operations in the formulae may easily lead to overflow or underflow: large numbers are treated as `infinity`, and small non-zero numbers as `0`. For instance this is what happens if we directly compute something like $(2^{10})! / (2^{10})!$, obviously equal to $1$:\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorial(2^10) / factorial(2^10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NaN\n```\n\n\n:::\n:::\n\nOne way to bypass this problem is by rewriting the formulae in ways that are mathematically equivalent but less prone to over- and under-flow. For example we can use identities like\n\n$$\nx / y = \\exp\\bigl(\\ln x - \\ln y\\bigr)\\ ,\\quad x, y > 0 \\ .\n$$\n\nNow indeed it works; note that `lfactorial()` is `log(factorial())` in R:\n\n::: {.cell}\n\n```{.r .cell-code}\nexp( lfactorial(2^10) - lfactorial(2^10) )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\nAnother useful identity that avoids over- and under-flow, if $\\pmb{x}$ is a vector of positive numbers, is the following:\n\n$$\n\\frac{\\pmb{x}}{\\operatorname{\\texttt{sum}}(\\pmb{x})}\n=\n\\frac{\n\\operatorname{\\texttt{exp}}\\bigl(\\operatorname{\\texttt{log}}(\\pmb{x})\n- \\operatorname{\\texttt{max}}(\\operatorname{\\texttt{log}}(\\pmb{x}))\\bigr)\n}{\\operatorname{\\texttt{sum}}\\bigl(\n\\operatorname{\\texttt{exp}}\\bigl(\\operatorname{\\texttt{log}}(\\pmb{x})\n- \\operatorname{\\texttt{max}}(\\operatorname{\\texttt{log}}(\\pmb{x}))\\bigr)\n\\bigr)}\n$$\n\n\\\n\n[{{< fa circle-exclamation >}} Storage]{.red}\n: With many variates and large domains, we may run out of memory in storing all possible counts $\\#(x,y,w,\\dotsc)$. For instance if we have four variates with 20 possible values each, we would need to store $4^{20}$ integers, which would take more than 4 000 GB:\n\n::: {.cell}\n\n```{.r .cell-code}\ntry( x <- integer(length = 4^20) )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nError : cannot allocate vector of size 4096.0 Gb\n```\n\n\n:::\n:::\n\nWe can bypass this problem again by using smart mathematical manipulations. In the case of formulae (@eq-dmagent-y)--(@eq-dmagent-aux), the product over all possible values $(x,y,w,\\dotsc)$ can be rewritten in one over all different *values of the counts*, which usually has much fewer terms. For example, if we have $N=10000$ datapoints, and $4^{20} -1$ counts are equal to $9000$, while one count is equal to $1000$, then we only need to store these *four* numbers rather than $4^{20}$ numbers!\n\nMany such mathematical tricks are used in finite-precision computations. Unfortunately their knowledge requires a separate course.\n\n\\\n\n[{{< fa circle-exclamation >}} Speed]{.red}\n: The formulae that the agent uses may involve sums over many terms, or repeated computations for many different variate values. Thus computation speed may become an issue.\n\n\n\n\n\n\n## Range of use of the code {#sec-code-range}\n\nThe concrete formulae discussed in the previous [chapter @sec-dirichlet-mix] can be put into code, for use in different tasks involving only nominal variates. Software of this kind can in principle be written to allow for some or all of the versatility discussed in §§ [-@sec-categ-probtheory]--[-@sec-underlying-distribution], for example the possibility of taking care (in a first-principled way!) of partially missing training data. But the more versatile we make the software, the more memory, processing power, and computation time it will require.\n\nRoughly speaking, more versatility corresponds to calculations of the joint probability\n\n::::{.column-page-right}\n:::{.callout-note}\n##  \n\n$$\n\\P(\n\\blue \nZ_{L}\\mo  z_{L}\n\\and\n\\dotsb \\and\nZ_{1}\\mo z_1\n\\black\n\\| \\yD\n)\n=\n\\frac{1}{\\amax-\\amin+1}\n\\sum_{\\ya=\\amin}^{\\amax}\n\\frac{\n\\prod_{\\bz} \\bigl(\\frac{2^{\\ya}}{M} + \\#\\bz - 1\\bigr)!\n}{\n\\bigl(2^{\\ya} + L -1 \\bigr)!\n}\n\\cdot\n\\frac{\n\\bigl(2^{\\ya} -1 \\bigr)!\n}{\n{\\bigl(\\frac{2^{\\ya}}{M} - 1\\bigr)!}^M\n}\n\\quad\n$$ {#eq-main-joint}\n\n:::\n::::\n\nfor more values of the quantities $\\blue Z_1, Z_2, \\dotsc$. For instance, if data about unit #4 are missing, then we need to calculate the joint probability above for several (possibly all) values of $\\blue Z_4$. If data about two units are missing, then we need to do an analogous calculation for all possible *combinations* of values; and so on.\n\nFor our prototype, let's forgo versatility about units used as training data. From now on we abbreviate the set of training data as\n\n:::{.column-margin}\nRecall that $\\bZ$ denotes all (nominal) variates of the population\n:::\n\n$$\n\\data \\defd\n(\nZ_{N}\\mo z_{N} \\and \\dotsb \\and\nZ_{2}\\mo z_2 \\and\nZ_{1}\\mo z_{1}\n)\n$$\n\nwhere $\\blue z_N, \\dotsc, z_2, z_1$ are specific values, stored in some training dataset. No values are missing.\n\nSince the training $\\data$ are given and fixed in a task, we omit the suffix \"${}_{N+1}$\" that we have often used to indicate a \"new\" unit. So \"$\\blue Z\\mo z$\" simply refers to the variate $\\bZ$ in a new application of the task.\n\nWe allow for full versatility in every new instance. This means that we can accommodate, *on the spot at each new instance*, what the predictand variates are, and what the predictor variates (if any) are. For example, if the population has three variates $\\bZ=(\\bA \\and \\bB \\and \\bC)$, our prototype can calculate, at each new application, inferences such as\n\n- $P(\\bB\\mo\\dotso\\|\\data \\and \\yD)$: any one predictand variate, no predictors\n\n- $P(\\bA\\mo\\dotso \\and \\bC\\mo\\dotso\\|\\data \\and \\yD)$: any two predictand variates, no predictors\n\n- $P(\\bA\\mo\\dotso \\and \\bB\\mo\\dotso \\and \\bC\\mo\\dotso\\|\\data \\and \\yD)$: all three variates\n\n- $P(\\bB\\mo\\dotso\\|\\bA\\mo\\dotso \\and \\data \\and \\yD)$: any one predictand variate, any other one predictor\n\n- $P(\\bB\\mo\\dotso\\| \\bA\\mo\\dotso \\and \\bC\\mo\\dotso \\and\\data \\and  \\yD)$: any one predictand variate, any other two predictors\n\n- $P(\\bA\\mo\\dotso \\and \\bC\\mo\\dotso\\|\\bB\\mo\\dotso \\and \\data \\and \\yD)$: any two predictand variates, any other one predictor\n\n\n## Code design and computations needed {#sec-code-computations2}\n\n\nTo enjoy the versatility discussed above, the code needs to compute\n\n::::{.column-page-right}\n:::{.callout-note}\n##  \n\n$$\n\\P(\n\\blue Z \\mo z\n\\and\n\\green\\data\n\\black \\| \\yD)\n=\n\\frac{1}{\\amax-\\amin+1}\n\\sum_{\\ya=\\amin}^{\\amax}\n\\Biggl(\\frac{2^{\\ya}}{M} + {\\green\\#}\\bz\\Biggr)\n\\cdot\n\\frac{\n\\prod_{\\bz} \\bigl(\\frac{2^{\\ya}}{M} + {\\green\\# z} - 1\\bigr)!\n}{\n\\bigl(2^{\\ya} + N \\bigr)!\n}\n\\cdot\n\\frac{\n\\bigl(2^{\\ya} -1 \\bigr)!\n}{\n{\\bigl(\\frac{2^{\\ya}}{M} - 1\\bigr)!}^M\n}\n$$ {#eq-objectP}\n\nfor all possible values $\\bz$, where ${\\green\\#}\\bz$ is the number of times value $\\bz$ appears **in the training [data]{.green}**, and $N = \\sum_{\\green z}{\\green\\# z}$ is the number of training data\n:::\n::::\n\nThis formula is just a rewriting of formula (@eq-main-joint) for $L=N+1$, simplified by using the property of the factorial\n\n$$(a+1)! = (a+1) \\cdot a!$$\n\n\n\nBut the computation of formula (@eq-objectP) (for all values of $\\bz$) must be done *only once* for a given task. For a new application we only need to combine these already-computed probabilities via sums and fractions. For example, in the three-variate case above, if in a new application we need to forecast $\\red A\\mo a$ given $\\yellow C\\mo c$, then we calculate\n\n::::{.column-page-inset-right}\n:::{.callout-note}\n##  \n\n(example with $Z \\defd ({\\red A}, {\\blue B}, {\\yellow C})$)\n\n$$\nP(\\red A\\mo a \\black \\|\\yellow C\\mo c \\black \\and \\data \\and \\yD)\n=\n\\frac{\n\\sum_{\\blue b}\nP(\\red A\\mo a \\black \\and \\blue B\\mo b \\black \\and \\yellow C\\mo c \\black \\and \\data \\| \\yD)\n}{\n\\sum_{\\purple \\alpha}\\sum_{\\blue b}\nP(\\red A\\mo {\\purple \\alpha} \\black \\and \\blue B\\mo b \\black \\and \\yellow C\\mo c \\black \\and \\data \\| \\yD)\n}\n\\quad\n$$ {#eq-forecast}\n\n:::\n::::\n\nwhere all $P(\\red A\\mo\\dotso \\black \\and \\blue B\\mo\\dotso \\black \\and \\yellow C\\mo\\dotso \\black \\and \\data \\| \\yD)$ are already computed.\n\n\\\n\nOur prototype software must therefore include two main functions, which we can call as follows:\n\n<!-- you can add url to specific line n by appending #Ln -->\n\n- `buildagent()` ([see code](https://github.com/pglpm/ADA511/blob/code/OPM_nominal.R))\n: computes $\\green\\#\\bz$ for all values $\\bz$, as well as the multiplicative factors\n    \n\t$$\n\t\\frac{\n\t\\bigl(2^{\\ya} -1 \\bigr)!\n}{\n\\bigl(2^{\\ya} + N \\bigr)!\n\\cdot\n{\\bigl(\\frac{2^{\\ya}}{M} - 1\\bigr)!}^M\n}\n$$\n    \n    for all $k$, in (@eq-objectP). This computation is done once and for all in a given task, using the training $\\data$ and the metadata $\\yD$ provided. The result can be stored in an array or similar object, which we shall call an `agent`-class object.\n\n- `infer()` ([see code](https://github.com/pglpm/ADA511/blob/master/code/OPM_nominal.R))\n: computes probabilities such as (@eq-forecast) at each new instance, using the stored `agent`-class object as well as the predictor variates and values provided with that instance, and the predictand variates requested at that instance.\n\n\\\n\nWe shall also include four additional functions for convenience:\n\n- `guessmetadata()`\n: builds a preliminary metadata file, encoding the background information $\\yD$, from some dataset.\n\n- `decide()`\n: makes a decision according to expected-utility maximization ([chapter @sec-basic-decisions]), using probabilities calculated with `infer()` and utilities.\n\n- `rF()`\n: draws one or more possible full-population frequency distribution $\\vf$, according to the updated degree of belief $\\p(F\\mo\\vf \\| \\data \\and \\yD)$\n\n- `plotFsamples1D()`\n: plots, as a generalized scatter plot, the possible full-population marginal frequency distributions for a single (not joint) predictand variate. If required it also also the final probability obtained with `infer()`.\n\n- `mutualinfo()`\n: calculates the mutual information ([§@sec-entropy-mutualinfo]) between any two sets of variates.\n\n::::{.column-body-outset-right}\n:::{.callout-caution}\n\n\n\nUsing the `and`-rule, prove (pay attention to the conditional \"$\\|$\" bar):\n\n$$\n\\frac{\n\\sum_{\\blue b}\nP(\\red A\\mo a \\black \\and \\blue B\\mo b \\black \\and \\yellow C\\mo c \\black \\and \\data \\| \\yD)\n}{\n\\sum_{\\purple \\alpha}\\sum_{\\blue b}\nP(\\red A\\mo {\\purple \\alpha} \\black \\and \\blue B\\mo b \\black \\and \\yellow C\\mo c \\black \\and \\data \\| \\yD)\n}\n=\n\\frac{\n\\sum_{\\blue b}\nP(\\red A\\mo a \\black \\and \\blue B\\mo b \\black \\and \\yellow C\\mo c \\black \\| \\data \\and \\yD)\n}{\n\\sum_{\\purple \\alpha}\\sum_{\\blue b}\nP(\\red A\\mo {\\purple \\alpha} \\black \\and \\blue B\\mo b \\black \\and \\yellow C\\mo c \\black \\| \\data \\and \\yD)\n}\n$$\n\n\\\n\nThis exercise shows that instead of\n\n$$\\P(\\blue Z \\mo z \\black \\and \\green\\data \\black \\| \\yD)$$\n\nwe could calculate\n\n$$\n\\P(\n\\blue Z \\mo z\n\\black \\|\n\\green\\data\n\\black \\and  \\yD)\n$$\n\nonce for all possible values $\\bz$, and use that. Mathematically and logically the two ways are completely equivalent. Numerically they can be different as regards precision or possible overflow errors. Using $\\P( \\blue Z \\mo z \\black \\| \\green\\data \\black \\and \\yD)$ would be convenient if our basic formula (@eq-main-joint) didn't contain the sum $\\sum_k$ over the $k$ index. Our code shall instead use $\\P(\\blue Z \\mo z \\black \\and \\green\\data \\black \\| \\yD)$ because it leads to slightly more precision and speed in some tasks.\n\n:::\n::::\n\n\n\n\n## Code optimization {#sec-code-optim}\n\nThe formulae of [chapter @sec-dirichlet-mix], if used as-written, easily lead to two kinds of computation problems. First, they generate overflows and `NaN`, owing to factorials and their divisions. Second, the products over variates may involve so many terms as to require a long computation time. In the end we would have to wait a long time just to receive a string of `NaN`s.\n\nThe first problem is dealt with by rewriting the formulae in terms of logarithms, and renormalizing numerators and denominators of fractions. See for example the lines defining `auxalphas` in the [`buildagent()`](https://github.com/pglpm/ADA511/blob/master/code/OPM_nominal.R) function, and the line that redefines `counts` one last time in the [`infer()`](https://github.com/pglpm/ADA511/blob/master/code/OPM_nominal.R) function.\n\nThe second problem is dealt with by reorganizing the sums as multiples of identical summands; see the lines working with `freqscounts` in the `buildagent()`function.\n\n::::{.column-margin}\n::: {.callout-tip}\n## {{< fa rocket >}} For the extra curious\n§6.1 in [*Numerical Recipes*](references.html)\n:::\n::::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}