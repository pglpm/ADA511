{
  "hash": "9f131bb5cdc0753f017ccd6b13cef6d6",
  "result": {
    "engine": "knitr",
    "markdown": "# [Connection with machine learning and AI]{.midgrey}\n::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0.5mu,\\mkern-0.5mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand*{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand*{\\sei}[1]{\\mathsfit{\\small #1}}\n<!-- \\providecommand{\\cat}[1]{\\texttt{\\small #1}} -->\n\\providecommand{\\cat}[1]{{\\small\\verb;#1;}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\nonscript\\mkern-3mu\\textrm{\\small#1}\\nonscript\\mkern-3mu}} -->\n\\providecommand*{\\mo}[1][=]{\\mathclose{}\\mathord{\\nonscript\\mkern0mu\\textrm{\\small#1}\\nonscript\\mkern0mu}\\mathopen{}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n\\providecommand*{\\e}{\\mathrm{e}}\n\\providecommand*{\\pu}{\\text{π}}\n\\providecommand*{\\RR}{\\mathbf{R}}\n\n$\\DeclarePairedDelimiter{\\set}{\\{}{\\}}$\n\\providecommand*{\\argmax}{\\operatorname{argmax}}\n<!-- \\DeclareMathOperator*{\\argmax}{argmax} -->\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n\n\n## Inferences with machine-learning algorithms\n\n\nSome works in machine learning focus on \"guessing the correct answer\", and this focus is reflected in the way their machine-learning algorithms -- especially classifiers -- are trained and used.\n\nIn [§@sec-optimality] we emphasized that \"guessing successfully\" can be a misleading goal, however, because it can lead us away from guessing *optimally*. We shall now see two simple but concrete examples of this.\n\n### A \"max-success\" classifier vs an optimal classifier\n\n:::{.callout-note}\n##  \nYou find the code for this chapter and exercises also in [this JupyterLab notebook for R](code/mlc_vs_opm.ipynb) and (courtesy of Viktor Karl Gravdal!) [this JupyterLab notebook for python](code/mlc_vs_opm_py.ipynb).\n:::\n\n\nWe shall compare the results obtained in some numerical simulations by using\n\n- a [Machine-Learning Classifier]{.yellow} trained to do most successful guesses\n- a prototype \"[Optimal Predictor Machine]{.blue}\" trained to make the optimal decision\n\nFor the moment we treat both as \"black boxes\", that is, we don't study yet how they're calculating their outputs (although you may already have a good guess at how the Optimal Predictor Machine works).\n\nTheir operation is implemented in [this R script](code/mlc_vs_opm.R) that we now load:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource('code/mlc_vs_opm.R')\n```\n:::\n\n\nThis script simply defines the function `hitsvsgain()`:\n\n```\nhitsvsgain(\n    ntrials,\n    chooseAtrueA,\n    chooseAtrueB,\n    chooseBtrueB,\n    chooseBtrueA,\n    probsA\n)\n```\n\nhaving six arguments:\n\n- `ntrials`: how many simulations of guesses to make\n- `chooseAtrueA`: utility gained by guessing `A` when the successful guess is indeed `A`\n- `chooseAtrueB`: utility gained by guessing `A` when the successful guess is `B` instead\n- `chooseBtrueB`: utility gained by guessing `B` when the successful guess is indeed `B`\n- `chooseBtrueA`: utility gained by guessing `B` when the successful guess is `A` instead\n- `probsA`: a tuple of probabilities (between `0` and `1`) to be used in the simulations (recycling it if necessary), for the successful guess being `A`; the corresponding probabilities for `B` are therefore `1-probsA`. If this argument is omitted it defaults to `0.5` (not very interesting)\n\n\n### Example 1: electronic component\n\nLet's apply our two classifiers to the *Accept or discard?* problem of [§@sec-intro]. We call `A` the alternative in which the element won't fail before one year, and should therefore be accepted *if this alternative were known at the time of the decision*. We call `B` the alternative in which the element will fail within a year, and should therefore be discarded *if this alternative were known at the time of the decision*. Remember that the crucial point here is that the classifiers *don't* have this information at the moment of making the decision.\n\nWe simulate this decision for 100 000 components (\"trials\"), assuming that the probabilities of failure can be `0.05`, `0.20`, `0.80`, `0.95`. The values of the arguments should be clear:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhitsvsgain(\n    ntrials = 100000,\n    chooseAtrueA = +1,\n    chooseAtrueB = -11,\n    chooseBtrueB = 0,\n    chooseBtrueA = 0,\n    probsA = c(0.05, 0.20, 0.80, 0.95)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTrials: 100000\nMachine-Learning Classifier: successes 87423 ( 87.4 %) | total gain -26897\nOptimal Predictor Machine:   successes 72351 ( 72.4 %) | total gain 9731\n```\n\n\n:::\n:::\n\n\nNote how the [machine-learning classifier]{.yellow} is the one that *makes most successful guesses* (around 88%), **and yet it leads to a net loss!** If the utility were in *kroner*, this classifier would cause the company producing the components a [net loss of more than 20 000 kr]{.red}.\n\nThe [optimal predictor machine]{.blue}, on the other hand, *makes fewer successful guesses* overall (around 72%), **and yet it leads to a net gain!** It would earn the company a [net gain of around 10 000 kr]{.green}.\n\n\n:::{.callout-caution}\n## {{< fa user-edit >}} Exercise\nHow is this possible? Try to understand what's happening; feel free to research this by modifying the `hitsvsgain()` function, so that it prints additional outputs.\n:::\n\n\n### Example 2: find Aladdin! (image recognition)\n\nA typical use of machine-learning classifiers is for image recognition: for instance, the classifier guesses whether a particular subject is present in the image or not.\n\nIntuitively one may think that \"guessing successfully\" should be the best goal here. But exceptions to this may be more common than one thinks. Consider the following scenario:\n\n> Bianca has a computer folder with 10 000 photos. Some of these include her beloved cat Aladdin, who sadly passed away recently. She would like to select all photos that include Aladdin and save them in a separate \"Aladdin\" folder. Doing this by hand would take too long, if at all possible; so Bianca wants to employ a machine-learning classifier.\n> \n> For Bianca it's important that no photo with Aladdin goes missing, so she would be very sad if any photo with him weren't correctly recognized; on the other hand she doesn't mind if some photos without him end up in the \"Aladdin\" folder -- she can delete them herself afterwards.\n\nLet's apply and compare our two classifiers to this image-recognition problem, using again the `hitsvsgain()` function. We call `A` the case where Aladdin is present in a photo, and `B` where he isn't. To reflect Bianca's preferences, let's use these \"emotional utilities\":\n\n- `chooseAisA = +2`: Aladdin is correctly recognized\n- `chooseBisA = -2`: Aladdin is not recognized and photo goes missing\n- `chooseBisB = +1`: absence of Aladding is correctly recognized\n- `chooseAisB = -1`: photo without Aladding end up in \"Aladding\" folder\n\nand let's say that the photos may have probabilities `0.3`, `0.4`, `0.6`, `0.7` of including Aladding:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhitsvsgain(\n    ntrials = 10000,\n    chooseAtrueA = +2,\n    chooseAtrueB = -1,\n    chooseBtrueB = 1,\n    chooseBtrueA = -2,\n    probsA = c(0.3, 0.4, 0.6, 0.7)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTrials: 10000\nMachine-Learning Classifier: successes 6557 ( 65.6 %) | total gain 4724\nOptimal Predictor Machine:   successes 6013 ( 60.1 %) | total gain 5576\n```\n\n\n:::\n:::\n\n\nAgain we see that the [machine-learning classifier]{.yellow} makes more successful guesses than the [optimal predictor machine]{.blue}, but the latter yields a higher \"emotional utility\".\n\nYou may sensibly object that this result could depend on the peculiar utilities or probabilities chosen for this example. The next exercise helps answering your objection.\n\n:::{.callout-caution}\n## {{< fa user-edit >}} Exercise\n- Is there any case in which the optimal predictor machine yields a strictly lower utility than the machine-learning classifier?\n    + Try using different utilities, for instance using `±5` instead of `±2`, or whatever other values you please.\n    + Try using different probabilities as well.\n\n- As in the previous exercise, try to understand what's happening. Consider this question: *how many photos including Aladdin did each classifier miss?*\n    \n    Modify the `hitsvsgain()` function to output this result.\n\n\n- Do the comparison using the following utilities: `chooseAtrueA = +1`, `chooseAtrueB = -1`, `chooseBtrueB = 1`, `chooseBtrueA = -1`. What's the result? what does this tell you about the relationship between the machine-learning classifier and the optimal predictor machine?\n:::\n\n\\\n\n## What is \"Artificial Intelligence\"?\n\n### \"AI\" as opposed to what?\n\nThe field of Artificial Intelligence is vast, and its boundaries are not clear-cut. Different books give slightly different definitions of AI. In everyday parlance the term \"AI\" is moreover used in ways that are *not* technically correct -- a bit like it happens with physics terms such as \"energy\" or \"force\". In this course we want to use *AI* in a technically more correct way.\n\nThe discussion of the possible definitions of AI could take several chapters. Let's try a shorter approach, by examining why the two words \"artificial\" and \"intelligence\" are used specifically.\n\\\n\n***Artificial*** as opposed to what? As opposed to *natural* for example. So it denotes something human-made, as opposed to something directly found in nature; say in an orangutan or in a dolphin.\n\\\n\n***Intelligence*** as opposed to what? As opposed to *stupidity*. The definition of \"intelligence\" itself, even natural intelligence, is still quite open. Generally we mean something that is *logical* or *rational*. Thus an agent that breaks some logical procedure, or that does not follow a procedure that it claims to follow, is not \"intelligent\".\n\\\n\nOf course neither term is fully dichotomous: we can distinguish different degrees of artificiality and of intelligence.\n\n### \"Intelligence\" is not \"human-likeness\"\n\nWe can distinguish two distinct endeavours in the field of Artificial Intelligence, considered in its most general extension:\n\n- achieving *human-like* behaviour;\n- achieving *intelligent reasoning*, or we could say *logical* or *rational reasoning*.\n\nIt's important to recognize immediately that these two endeavours may *not be mutually compatible*. We often associate human behaviour with error-making and irrationality. We may say that a person is very irrational, yet we don't say that because of this the person is inhuman.\n\nGiven the incompatible character of the two endeavours above, we must be very clear and conscious about which goal we're trying to achieve; otherwise we won't achieve any goal at all. And in technical discussions we must be careful to adopt the correct terminology. In particular we should avoid the term \"intelligent\" when we instead mean \"human-like\", and vice versa.\n\nAn example of such confusion is with present-day *large language models* (LLMs), and in particular those with a Generative Pre-training Transformer (GPT) architecture. In many media they are referred to as \"AI systems\"; yet what they achieve is not *intelligence*, but rather *human-like* language processing -- including non-intelligent processing.\n\nIf you have access to a large language model, you have surely witnessed examples of stupid output^[often euphemistically called \"hallucination\" because this term may increase sales, whereas \"stupid\" would risk decreasing sales.]. You can try a variation of the following experiment:\n\n1. Ask the LLM to write down a short list of some set, for instance of all Norwegian counties.\n2. Ask the LLM to select from the list only those item that have one or more letter \"r\" in their name. See the result.\n3. Ask the LLM to give you a step-by-step procedure to achieve the selection required in the previous step.\n\nTypically a LLM fails at task 2., even if it can give a completely sound procedure in task 3. Clearly it isn't internally following the logical procedure.\n\\\n\nThis is the reason why in this course we do *not* categorize LLMs as \"artificial intelligence\", but rather as human-mimicking machines. But we shall consider possible ways in which a true intelligence framework could be built into these machines.\n\n\\\n\n::: {.callout-warning}\n## {{< fa book >}} Study reading\n\n[**Read**]{.lightblue}:\n\n- Chapters 1--2 of [*Artificial Intelligence*](references.html).\n:::\n\n",
    "supporting": [
      "connection-1-ML_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}