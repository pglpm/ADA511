{
  "hash": "ee37b7136a636d701f0dbec0b08fe5ea",
  "result": {
    "engine": "knitr",
    "markdown": "# [Working with R, I]{.lightblue} {.unnumbered}\n::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0.5mu,\\mkern-0.5mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand*{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand*{\\sei}[1]{\\mathsfit{\\small #1}}\n<!-- \\providecommand{\\cat}[1]{\\texttt{\\small #1}} -->\n\\providecommand{\\cat}[1]{{\\small\\verb;#1;}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\nonscript\\mkern-3mu\\textrm{\\small#1}\\nonscript\\mkern-3mu}} -->\n\\providecommand*{\\mo}[1][=]{\\mathclose{}\\mathord{\\nonscript\\mkern0mu\\textrm{\\small#1}\\nonscript\\mkern0mu}\\mathopen{}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n\\providecommand*{\\e}{\\mathrm{e}}\n\\providecommand*{\\pu}{\\text{Ï€}}\n\\providecommand*{\\RR}{\\mathbf{R}}\n\n$\\DeclarePairedDelimiter{\\set}{\\{}{\\}}$\n\\providecommand*{\\argmax}{\\operatorname{argmax}}\n<!-- \\DeclareMathOperator*{\\argmax}{argmax} -->\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n\nAs announced in the [introduction](index.html), in these notes we use the [`R`](https://www.r-project.org/) programming language to explore data science topics and for the software implementation of AI ideas.\n\n\n::: {.cell}\n\n:::\n\n\\\n\n## R resources {#sec-R-resources}\n\nThere's plenty of resources on installing R and learning its basics; you just have to do a short search and find the one that resonates with you. Examples:\n\n- [R Installation and Administration](https://cran.r-project.org/doc/manuals/r-release/R-admin.html)\n- [An Introduction to R](https://cran.r-project.org/doc/manuals/r-release/R-intro.html)\n- [R Tutorial](https://www.w3schools.com/r/)\n- [Another Introduction to R](https://intro2r.com/)\n\nThere are also resources to run *simple* R scripts online:\n\n- [Run R code online](https://rdrr.io/snippets/)\n- [Run your R code](https://www.mycompiler.io/new/r)\n- [R online compiler](https://www.w3schools.com/r/r_compiler.asp)\n\n\n## R setup {#sec-R-setup}\n\nThere are various ways of working with R, as well as various [Integrated Development Environment](https://adacomputerscience.org/concepts/soft_ide)s, which you can find with an online search. Use whatever you like best. In these notes we'll write the code to run, which you can simply paste into an R console or run through your chosen software (note the copy icon on the right of each code snippet). It's understood that you are using some working directory or folder, where you can load data and other files from, and where you save your results to.\n\nLet's start with something very simple. Here's an input, and the output you should see:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nHere's another simple example (character strings in R are delimited by single quotes `'` or double quotes `\"`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint('hello')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello\"\n```\n\n\n:::\n:::\n\n\nLet's assign the value `5` to the variable `x`, then ask what `x` is; we also write a comment, introduced by one or more `#` signs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## assign value to x\nx <- 5\n\n## output x\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nNow let's assign the sequence of values $0, -9, 4.7$ to `x`; this is done using the function `c()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## assign values to x\nx <- c(0, -9, 4.7)\n\n## output x\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.0 -9.0  4.7\n```\n\n\n:::\n:::\n\n\nLet's ask what is the *second* value in `x`; this is done with square brackets `[ ]`. Note that indexing starts from 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -9\n```\n\n\n:::\n:::\n\n\n\\\n\nWe shall need some extra R packages to develop the material in these notes:\n\n- [lpSolve]((https://cran.r-project.org/package=lpSolve))\n- [foreach]((https://cran.r-project.org/package=foreach))\n- [extraDistr]((https://cran.r-project.org/package=extraDistr))\n\nso let's start an R session and install them.^[Depending on your operating system you can choose to install them as user, making them available only to you, or as superuser or administrator, making them available to every user in your machine.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('lpSolve')\ninstall.packages('foreach')\ninstall.packages('extraDistr')\n```\n:::\n\n\nWe shall also use some custom-made functions for plotting and reading data. They are defined in the [`tplotfunctions.R`](code/tplotfunctions.R) file, which you should download to your working directory. Once it's downloaded, you can load the functions this way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource('tplotfunctions.R')\n```\n:::\n\n\n\\\n\n## First exploration with R {#sec-R-1st-explore}\n\nAs a very simple task to get acquainted with R, let's do the following:\n\n- Assign the sequence of values form `-5` to `5`, in steps of `0.5`, to the variable `x`.\n\n- Calculate $x^2 + 1$ for each value contained in `x`, and assign the resulting values to the variable `y`.\n\n- Calculate $7 \\sin(x)$ for each value contained in `x`, and assign the resulting values to the variable `z`.\n\n- Plot the graphs of `y` vs `x`, and of `z` vs `x`, together, using different colours and line style, giving appropriate names to the axes, and choosing a range from `-6` to `35` for the vertical axis.\n\nWe do all these operations, in sequence, below; note the comments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(from = -5, to = 6, by = 0.5)\n\ny <- x^2 + 1\n\nz <- 7 * sin(x)\n\ntplot(\n    x = x, y = y,\n    col = 1, lty = 1,         ## colour and type of line\n    ylim = c(-6, 35),         ## y-axis range\n    xlab = 'x', ylab = 'y, z' ## axes labels\n)\n\ntplot(\n    x = x, y = z,\n    col = 2, lty = 2, ## different colour & type\n    add = TRUE        ## add to previous plot\n)\n```\n\n::: {.cell-output-display}\n![](Rintro1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\nLooking at the code above you notice the following features:\n\n- Many functions, such as `seq()`, have *named arguments*, for example `from = -5`, or `to = 6`, or `xlab = 'x'`. In some cases the argument names can be omitted; for instance we could write `seq(-5, 6, by = 0.5)`. But in these cases one must pay attention to the order of the arguments.\n\n- Most mathematical operations are performed *element-wise* on sequences of numbers.\n\n- In some circumstances it is possible to break a command over several lines; for instance, the arguments to the `tplot()` functions were not all given in one line. One must be careful because linebreaks do terminate some expressions; but in general it is safe -- and clearer for people who read your code -- to distribute function arguments across several lines, as done above.\n\n\n:::{.callout-caution}\n\n- Get familiar with basic mathematical operations in R, like `+`, `-`, `*`, `/`, `^`, `exp()`, `log()`.\n\n- Get familiar to assigning single values and sequences of values to variables.\n\n- Check what happens when you change the colour and type of plot lines: try all numbers from `1` to `10`.\n\n- Check what happens when you choose different ranges for the vertical axis in the first plot. Can you change the vertical range when you call the second plot?\n\n- What happens if you omit the vertical-axis range `ylim = c(-6, 35)`? (pay attention not to leave spurious commas.)\n\n- Check what happens if you specify a range for the horizontal axis with `xlim = `.\n\n:::\n",
    "supporting": [
      "Rintro1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}