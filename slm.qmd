# [Example application: "small language model"]{.red} {#sec-example-slm}
{{< include macros.qmd >}}
{{< include macros_exchangeability.qmd >}}
{{< include macros_opm.qmd >}}
{{< include macros_slm.qmd >}}

```{r}
#| echo: false
knitr::opts_knit$set(root.dir = "code/")
options(repr.plot.width = 6 * sqrt(2), repr.plot.height = 6)
```

## Natural language as inference and decision {#sec-language-inference}

In [§@sec-meaning-decision] we remarked that even a process like speaking is a continuous decision-making process. Each uttered word is chosen among an infinity of other possible ones. The choice depends not only on the object or idea's noun that has to be communicated at the moment, but also on long-term goals and consequences. Is the conversation's purpose to be funny? Is it to explain something in the most precise way possible? What's the probability that this particular choice of words offend the listener? What's the probability that this possible sentence is misunderstood, and what would happen in that case?

The decision-making underlying speaking is remarkably complex, and can only be represented by a deep sequence of decisions and outcomes (we'll discuss decision sequences in [ch. @sec-making-decisions]), trying to forecast short-term and long-term future consequences. Most of this decision-making takes place almost unconsciously in humans, by means of heuristic, approximate procedures. But it's nevertheless a decision-making process.

:::{.column-margin}
![](decision_tree_raiffa.jpg){width=100%}
:::

Building an AI agent that can speak *in the sense above* is still out of reach. Speaking in that sense requires an agent to have long-term goals and a set of values. But speaking can remarkably be *mimicked*, at least for short time spans, by a different inference and decision process. In human speech the word choice depends on future goals as much or more than past factors; but we can try to draw an inference based on past factors alone.

In the simplest inference of this kind, an agent can assign a degree of belief about the word that "should follow next", **based on the words that precede it**. This is how the next-word predictors of some smartphone keyboards work, and it is essentially also the way Large Language Models (LLMs) and General Pretrained Transformers (GPTs) work. The inference is based on the frequencies of many different sequences of words, learned from as many written or spoken texts as possible.

::::{.column-margin}
::: {.callout-tip}
## {{< fa rocket >}} For the extra curious

[*Large language models as Markov chains*](references.html)

:::
::::

This way of operation is also the reason why we can't really say that large language models *understand* language, despite some literature stating that they do. They don't do any kind of forecast of the consequences of their word choice, nor any inferences about the intentions of their interlocutor; not even approximate, heuristic ones. They have simply learned word frequencies in a huge variety of contexts.


## The OPM as a small language model {#sec-opm-as-slm}

Algorithms that implement the kind of word inference just described usually do so in an *exchangeable* way. They use the frequencies of different word sequences, without regard to whether most of those sequences occur, say, in older rather than newer texts.

Our OPM is also designed to use built-in exchangeable beliefs, and in the previous chapter we saw its extreme versatility with exchangeable inferences of nominal variates -- just what words, more or less, are. So let's try to use it for word inference, and see if it can mimic speech. Of course we cannot expect spectacular results: large language models manage to make their remarkable inferences after learning more than tens of trillions (10 000 000 000 000) of words, which require huge amounts of memory and time. Owing to our memory and time limitations, our OPM can act as a "small language model".

To use the OPM this way, we define a population of $n$ variates, let's say $n = 3$. The three variates are defined as **consecutive** words in some specific set of texts. We can call them $\worda$, $\wordb$, $\wordc$, and so on. Instead of words it's actually best to use [*tokens*]{.blue}, which comprise not only words, but punctuation marks like `,.;:!?` and other signs -- the exact definition of token depends on the specific application. The sequence of $n$ tokens is often called an **n-gram**.

### Preparing the learning data from some text {#sec-prepare-text}

In order to prepare the learning data for our OPM agent, let's load some R functions defined in the [`textpreparation.R`](https://github.com/pglpm/ADA511/blob/master/code/textpreparation.R) file, as well as the OPM functions, from the usual directory\
[https://github.com/pglpm/ADA511/blob/master/code](https://github.com/pglpm/ADA511/blob/master/code):

```{r}
source('tplotfunctions.R')
source('OPM_nominal.R')
source('textpreparation.R')

set.seed(400)
```

The function `preparengramfiles()` takes three input arguments:

- `inputfile`: the name of a text `.txt` file, used to train the agent;
- `outsuffix`: the suffix for the output files (see below);
- `n`: the $n$ of the n-grams, default `n = 3`;
- `maxtokens`: the maximum number of unique tokens to use -- the "vocabulary" -- in case we need to save memory; default is `maxtokens = Inf`, which uses all tokens from the input text.

The function creates two `csv` files: one containing the training data with all n-grams from the input text, and one containing the metadata, consisting in the vocabulary. It outputs the file names as list with elements `metadata` and `data`.

For simplicity, the function converts all text to upper case and ASCII characters, it replaces every sequence of digits 0–9 with the single lowercase letter `n`, and only keeps the following punctuation: `,.;:?!%$&@+'/-`.

As a concrete example let's start with a simple text: the lyrics from Daft Punk's song [*Around the World*](https://www.youtube.com/watch?v=K0HSD_i2DvA):

:::{.column-margin}
<!-- {{< video https://www.youtube.com/watch?v=lFIYKmos3-s >}} -->
{{< video https://www.youtube.com/watch?v=K0HSD_i2DvA >}}
:::

> Around the world, around the world.  
> Around the world, around the world.

These two lines are stored in the file [`texts/around_the_world.txt`](https://github.com/pglpm/ADA511/blob/master/code/texts/around_the_world.txt). We shall use 3-grams to train our agent:

```{r}
ngramfiles <- preparengramfiles(
    inputfile = 'texts/around_the_world.txt',
    outsuffix = 'around',
    n = 3,
    maxtokens = Inf
)
```

The function tells us that it used five unique tokens, and from the text it produced a learning dataset of 22 3-grams. Let's take a look at the learning dataset:

```{r}
read.csv(ngramfiles$data)
```

We see that the token vocabulary consists of\ \ {`AROUND` `THE` `WORLD` `,` `.`}.\ \ The learning data consist of all sequences, 22 in total, of three consecutive tokens present in the text. Note a specific word in the original text therefore usually appears in three different datapoints, except for the very first and very last two words.


Let's build an `opmSLM` agent and make it learn from these metadata and data:

```{r}
opmSLM <- buildagent(
    metadata = ngramfiles$metadata,
    data = ngramfiles$data
)
```

### Token inferences

We ask the `opmSLM` agent to draw an inference about $\worda$, and sort the results in order of decreasing probabilities:

```{r}
probs <- infer(agent = opmSLM, predictand = 'word1')

sort(probs, decreasing = TRUE)
```

These degrees of belief make sense: in the learning text, if we take any token that can be followed by two more, we find `AROUND`, `THE`, and `WORLD` with approximately equal frequencies, somewhat less for `WORLD` because it also occurs in second-last position. The two punctuation marks occur with around half those frequencies.

The agent learned from just two lines, though. Let's inspect the agent's beliefs about the frequencies in a possibly larger text, by means of the `plotFsamples1D()` function:

```{r}
plotFsamples1D(agent = opmSLM,
    n = 200,
    predictand = 'word1',
    sort = +Inf,
    ylim = c(0,1))
```

so the agent is open to possible changes in the frequencies, if more text were added to its learning data.

Finally let's use the agent as a small language model. If a sequence of two tokens is "`AROUND` `THE`", what should be the next word?

```{r}
probs <- infer(agent = opmSLM,
    predictand = 'word3',
    predictor = list(word1 = 'AROUND', word2 = 'THE'))

sort(probs, decreasing = TRUE)
```

The agent believe at 98% that it should be `WORLD`!

Our agent can actually also do inferences that many large language models are not designed to do; for instance it can guess the token *preceding* a sequence of two tokens. What should come before "`THE` `WORLD`"?

```{r}
probs <- infer(agent = opmSLM,
    predictand = 'word1',
    predictor = list(word2 = 'THE', word3 = 'WORLD'))

sort(probs, decreasing = TRUE)
```

It can also guess the middle token. What should be between `THE` and `,`?

```{r}
probs <- infer(agent = opmSLM,
    predictand = 'word2',
    predictor = list(word1 = 'THE', word3 = ','))

sort(probs, decreasing = TRUE)
```


## A more demanding example {#sec-slm-large-example}

The simple text we chose was just for testing. Now we use a slightly larger text: the United Nation's [*Universal Declaration of Human Rights*](https://www.un.org/en/about-us/universal-declaration-of-human-rights), stored in [`texts/human_rights.txt`](https://github.com/pglpm/ADA511/blob/master/code/texts/human_rights.txt). The core of this document is a set of Articles, for example:

> Article 1  
> All human beings are born free and equal in dignity and rights. They are endowed with reason and conscience and should act towards one another in a spirit of brotherhood.
> 
> Article 2  
> Everyone is entitled to all the rights and freedoms set forth in this Declaration, without distinction of any kind, such as race, colour, sex, language, religion, political or other opinion, national or social origin, property, birth or other status.
> [...]


Prepare the metadata and learning dataset:

```{r}
ngramfiles <- preparengramfiles(
    inputfile = 'texts/human_rights.txt',
    outsuffix = 'around',
    n = 3,
    maxtokens = Inf
)
```

This time the vocabulary is over 500 tokens, and the agent will learn from around 2000 3-grams.

Build an agent from these metadata and data. We call it again `opmSLM` (rewriting the previous one). To avoid memory problems, we use the option `savememory = TRUE`, which stores the learning information in a memory-efficient way -- at the cost of slightly longer computation times during inferences.

```{r}
opmSLM <- buildagent(
    metadata = ngramfiles$metadata,
    data = ngramfiles$data,
    savememory = TRUE
)
```

Now some inferences. Recall that the text is converted to uppercase, and all numbers are replaced with `n`. Many pieces of text thus begin with "`ARTICLE` `n`". Ask the agent what should follow after these two tokens. Let's just display the five most probable tokens:

```{r}
probs <- infer(agent = opmSLM,
    predictand = 'word3',
    predictor = list(word1 = 'ARTICLE', word2 = 'n'))

sort(probs, decreasing = TRUE)[1:5]
```

Roughly 75% of Articles begin with "everyone...", and this is roughly the agent's belief.


### Apparent grammar knowledge

Large language models seem to have good grammar knowledge. This knowledge comes, not from the study of grammar rules, but again simply from the frequencies of particular word combinations in the training text. Let's see if our small language model displays some rudimentary grammar.

Which word should follow the *noun* "right", as in "the right..."?

```{r}
probs <- infer(agent = opmSLM,
    predictand = 'word3',
    predictor = list(word1 = 'THE', word2 = 'RIGHT'))

sort(probs, decreasing = TRUE)[1:5]
```

The `opmSLM` agent believes at 93% that the preposition "to" should follow "the right".

Another grammar question: which is correct, "everyone has", or "everyone have"? Let's see the agent's beliefs about either sequence. To check them, we must use `infer()` to calculate the probabilities of all tokens after `EVERYONE`, and then select the particular tokens `HAS` and `HAVE`. We can compare the two probabilities against each other:

```{r}
probs <- infer(agent = opmSLM,
    predictand = 'word2',
    predictor = list(word1 = 'EVERYONE'))

probHas <- probs['HAS']

probHave <- probs['HAVE']

## probability of each, assuming that one of them is true

c(probHas, probHave) / (probHas + probHave)
```

A 99.9% belief that "everyone has" is correct between the two!


:::{.callout-caution}

Using the four fundamental rules or the shortcut rules, prove that

$$
\P\bigl(\cat{has} \| (\cat{has} \lor \cat{have}) \and \yI) =
\frac{
\P(\cat{has} \| \yI)
}{
\P(\cat{has} \| \yI) + \P(\cat{have} \| \yI)
}
$$

taking into account that $\cat{has}$ and $\cat{have}$ are mutually exclusive. (In our case $\yI \defd \cat{everyone} \land D$, where $D$ is the learning and background information.)
:::


## How much learning data should we use? {#sec-amount-ngrams}

Our small-language-model agent made reliable inferences so far, relying on sets of three tokens. What if we use 4-grams, or 5-grams, instead of 3-grams? won't our agent's performance increase?

Not necessarily. Using n-grams with higher $n$ means that the agent is working with a population with more variates, and therefore it needs more learning data in order to arrive at sharper beliefs.

Recall from [§@sec-prepare-opm1] and [§@sec-intro-dirichlet-mix] that our Dirichlet-mixture agent has the nifty capability to estimate how many training datapoints should be necessary to concretely modify its initial beliefs. What's the situation with the present agent? It learned from around 2000 datapoints; are they enough? Let's plot the belief distribution about the necessary amount, as we did in [§@sec-prepare-opm1]:

```{r}
flexiplot(x = opmSLM$alphas, y = opmSLM$palphas, type = 'b',
    xlim = c(0, 10000), ylim = c(0, NA),
    xlab = 'required number of training data', ylab = 'probability')
```

Oops! The agent is telling us that the 2000 datapoints we gave it are very probably not enough: it'd be better with at least 4000!

As we increase the order of n-grams, much more datapoints are needed.

## Text generation: a preview {#sec-preview-gentext}



```{r}
text <- generatetext(
    agent = opmSLM,
    prompt = c('ARTICLE', 'n'),
    stopat = 50,
    online = FALSE
)

wrapprint(text, wrapat = 50)
```

\

[*(To be continued)*]{.grey}
