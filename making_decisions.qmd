# [Making decisions]{.blue} {#sec-making-decisions}
{{< include macros.qmd >}}
{{< include macros_decisions.qmd >}}


## Maximization of expected utility {#sec-max-exp-utilities}

In the previous chapter we associated utilities to consequences, that is, pairs $(\yD \and {\red Y\mo y})$ of decisions and outcomes. We can also associated utilities to the decisions alone -- and these are used to determine the *optimal* decision.

The [**expected utility**]{.blue} of a decision $\yD$ is calculated as a weighted average over all possible outcomes, the weighs being the outcomes' probabilities:

$$\uu(\yD \|\yI) 
= \sum_{\red y} \uu(\yD \and {\red Y\mo y} \| \yI) \cdot
\P({\red Y\mo y} \| \yD \and {\green X\mo x} \and \data \and \yI)
$$

\

According to Decision Theory the agent's final decision is determined by the

:::::{.column-page-right}
:::{.callout-note style="font-size:120%"}
## [**Principle of maximal expected utility**]{style="font-size:120%"}
::::{style="font-size:120%"}

The optimal decision, which should be made by the agent, is the one having maximal expected utility:

$$
\yD_{\text{optimal}} =
\argmax\limits_{\yD} \sum_{\red y} \uu(\yD \and {\red Y\mo y} \| \yI) \cdot
\P({\red Y\mo y} \| \yD \and {\green X\mo x} \and \data \and \yI)
$$

(where, in some tasks, the probabilities may not depend on $\yD$)

::::
:::
:::::

:::{.small}
In the formula above, "$\argmax\limits_z G(z)$" is the value $z^*$ which maximizes the function $G(z)$. Note the difference:\ \ $\max\limits_z G(z)$\ \ is the value of the maximum itself (its $y$-coordinate, so to speak), whereas\ \ $\argmax\limits_z G(z)$\ \ is the value of the *argument* that gives the maximum (its $x$-coordinate). For instance

$$\max\limits_z (1-z)^2 = 0 \qquad\text{\small but}\qquad \argmax\limits_z (1-z)^2 = 1$$
:::

\

It may happen that there are several decisions which have equal, maximal expected utility. In this case any one of them can be chosen. A useful strategy is to choose one among them with equal probability. Such strategy helps minimizing the loss from possible small errors in the specification of the utilities, or from the presence of an antagonist agent which tries to predict what our agent is doing.


### Numerical implementation in simple cases

The principle of maximal expected utility is straightforward to calculate in many important problems.

In [§@sec-what-utilities] we represented the set of utilities by a utility matrix $\um$. If the probabilities of the outcomes do **not** depend on the decisions, we represent them as a column matrix $\Pm$, having one entry per outcome:

$$
\Pm \defd
\begin{bmatrix}
\P({\red Y\mo y}' \| {\green X\mo x} \and \data \and \yI)
\\
\P({\red Y\mo y}'' \| {\green X\mo x} \and \data \and \yI)
\\
\dotso
\end{bmatrix}
$$

Then the collection of expected utilities is a column matrix, having one entry per decision, given by the matrix product $\um \Pm$.

All that's left is to check which of the entries in this final matrix is maximal.


## Concrete example: targeted advertisement {#sec-max-exp-util-example}

As a concrete example application of the principle of maximal expected utility, let's keep on using the adult-income task from [chapter @sec-example-opm1], in a typical present-day scenario.

Some corporation, which offers a particular phone app, wants to [bombard its users with advertisements](https://pluralistic.net/2023/07/24/rent-to-pwn/), because advertisement generates much more revenue than making the users pay for the app. For each user the corporation can choose one among three ad-types, let's call them $\yA, \yB, \yC$. The revenue obtained from these ad-types depends on whether the target user's income is $\yl$ or $\yh$. A separate study run by the corporation has shown that the average revenues (per user per minute) depending on the three ad-types and the income levels are as follows:

:::{.columns}

::::{.column width="25%"}

::::

::::{.column width="50%"}

+:-------------------:+:-------------------:+--------------------:+--------------------:+
|                                           | $\income$                                 |
+                                           +---------------------+---------------------+
|                                           | $\yl$               |  $\yh$              |
+---------------------+---------------------+---------------------+---------------------+
| [ad-type]{.yellow}  |   $\yA$             | $\blue -1\,\$$      |  $\blue 3\,\$$      |
+                     +---------------------+---------------------+---------------------+
|                     |   $\yB$             | $\blue 2\,\$$       |  $\blue 2\,\$$      |
+                     +---------------------+---------------------+---------------------+
|                     |   $\yC$             | $\blue 3\,\$$       | $\blue -1\,\$$      |
+---------------------+---------------------+---------------------+---------------------+
: Revenue depending on ad-type and income level {#tbl-income .sm}

::::

::::{.column width="25%"}

::::
:::

Ad-type $\yB$ is a neutral advertisement type that leads to revenue independently of the target user's income. Ad-type $\yA$ targets high-income users, leading to higher revenue from them; but it leads to a loss if shown to the wrong target (more money spent on making and deploying the ad than what is gained from users' purchases). Vice versa, ad-type $\yB$ targets low-income users, with a reverse effect.

The corporation doesn't have access to its users' income levels, but it covertly collects, through some other app, all or some of the eight predictor variates $\green\mathit{workclass}$, $\green\mathit{education}$, $\green\dotsc$, $\green\mathit{sex}$, $\green\mathit{native\_country}$ from each of its users. The corporation has also access to the adult-income dataset (or let's say a more recent version of it).

In this scenario the corporation would like to use an AI agent that can choose and show the optimal ad-type to each user.

\

Our prototype agent from chapters [-@sec-code-design], [-@sec-code-workflow], [-@sec-example-opm1] can be used for such a task. It has already been trained with the dataset, and can use any subset (possibly even empty) of the eight predictors to calculate the probability for the two income levels.

All that's left is to equip our prototype agent with a function that outputs the optimal decision, given the calculated probabilities and the set of utilities. In our code this is done by the function `decide()` described in [chapter @sec-code-workflow] and reprinted here:



:::{.small}

{{< fa code >}} [`decide(probs, utils=NULL)`](https://github.com/pglpm/ADA511/blob/master/code/OPM-nominal/decide.R)
: Arguments:
    : - *`probs`*: a probability distribution for one or more variates.
	- *`utils`*: a named matrix or array of utilities. The **rows** of the matrix correspond to the available decisions, the **columns** or remaining array dimensions correspond to the possible values of the predictand variates.
	
	
	Output:
    : a list of elements `EUs` and `optimal`:
    
        - `EUs` is a vector containing the expected utilities of all decisions, sorted from highest to lowest
		- `optimal` is the decision having maximal expected utility, or one of them, if more than one, selected with equal probability
	
	Notes:
	: - If *`utils`* is missing or `NULL`, a matrix of the form $\begin{bsmallmatrix}1&0&\dotso\\0&1&\dotso\\\dotso&\dotso&\dotso\end{bsmallmatrix}$ is assumed (which corresponds to using *accuracy* as evaluation metric).

:::

### Example

A new user logs in; all eight predictors are available for this user:

:::{.small}

$$\green
\begin{aligned}
&\mathit{workclass} \mo \cat{Private}
&& \mathit{education} \mo \cat{Bachelors} 
\\ & \mathit{marital\_status} \mo \cat{Never-married} 
&& \mathit{occupation} \mo \cat{Prof-specialty} 
\\ & \mathit{relationship} \mo \cat{Not-in-family} 
&& \mathit{race} \mo \cat{White} 
\\ & \mathit{sex} \mo \cat{Female} 
&& \mathit{native\_country} \mo \cat{United-States}
\end{aligned}
$$

:::

The agent calculates (using the `infer()` function) the probabilities for the two income levels, which turn out to be

:::{.small}

$$
\begin{aligned}
&\P({\red\income\mo\yl} \| \predictor, \data, \yI) = 83.3\%
\\&\P({\red\income\mo\yh} \| \predictor, \data, \yI) = 16.7\%
\end{aligned}
$$

:::

and can be represented by the column matrix

$$\Pm \defd
\green\begin{bmatrix}
0.833\\0.167
\end{bmatrix}
$$

The utilities previously given can be represented by the matrix

$$\um \defd
\blue\begin{bmatrix}
-1&3\\2&2\\3&-1
\end{bmatrix}
$$

Multiplying the two matrices above we obtain the expected utilities of the three ad-types for the present user:

:::{.column-body-outset-right}

$$
\um \Pm = 
\blue\begin{bmatrix}
-1&3\\2&2\\3&-1
\end{bmatrix}
\,
\green\begin{bmatrix}
0.833\\0.167
\end{bmatrix}\black
=
\begin{bmatrix}
{\blue -1}\cdot{\green 0.833}
+ {\blue 3}\cdot{\green 0.167}
\\
{\blue 2}\cdot{\green 0.833}
+ {\blue 2}\cdot{\green 0.167}
\\
{\blue 3}\cdot{\green 0.833}
+ ({\blue -1})\cdot{\green 0.167}
\end{bmatrix}
=
\begin{bmatrix}
-0.332\\
2.000\\
\boldsymbol{2.332}
\end{bmatrix}
$$

:::

The highest expected utility is that of ad-type $\yC$, which is therefore shown to the user.

### Powerful flexibility of the optimal predictor machine

In the previous chapters we already emphasized and witnessed the flexibility of the optimal predictor machine with regard to the availability of the predictors: it can draw an inference even if some or all predictors are missing.

Now we can see another powerful kind of flexibility: the optimal predictor machine can in principle *use different sets of decisions and different utilities for each new application*. The decision criterion is not "hard-coded"; it can be customized on the fly.

The possible number of ad-types and the utilities could even be a function of the predictor values. For instance, there could be a set of three ad-types targeting users with $\green\mathit{education}\mo\cat{Bachelors}$, a different set of four ad-types targeting users with $\green\mathit{education}\mo\cat{Preschool}$, and so on.

\

## The full extent of Decision Theory {#sec-DT-generalization}

The simple decision-making problems and framework that we have discussed in these notes are only the basic blocks of Decision Theory. This theory covers more complicated decision problems. We only mention some examples:

- **Sequential decisions**. Many decision-making problems involve sequences of possible decisions, alternating with sequences of possible outcomes. These sequences can be represented as decision trees. Decision theory allows us to find the optimal decision sequence  for instance through the *averaging out  and folding back" procedure*.

::::{.small}
::: {.callout-tip}
## {{< fa rocket >}} For the extra curious
- §15.5 and chapter 16 of [*Artificial Intelligence*](references.html)
- Chapter 2 of [*Decision Analysis*](references.html)
:::
::::

\

- **Uncertain utilities**. It is possible to recast Decision Theory and the principle of maximum expected utility in terms, not of utility functions $\uu(\yD \and {\red Y\mo y} \| \yI)$, but of probability distributions over utility values:
    
    $$\P({\blue U\mo u} \| \yD \and {\red Y\mo y} \and \yI)$$
    
	Formally the two approaches can be shown to be equivalent.

::::{.small}
::: {.callout-tip}
## {{< fa rocket >}} For the extra curious
- Chapter 8 of [*Rational Descriptions, Decisions and Designs*](references.html)
- Box 11.1 (p. 351) of [*Risk Assessment and Decision Analysis with Bayesian Networks*](references.html)
:::
::::

\

- **Acquiring more information**. In many situations the agent has one more possible choice: to gather more information in order to calculate sharper probabilities, rather than deciding immediately. This kind of decision is also accounted for by Decision Theory, and constitutes one of the theoretical bases  of "reinforcement learning".

::::{.small}
::: {.callout-tip}
## {{< fa rocket >}} For the extra curious
- §15.6 of [*Artificial Intelligence*](references.html)
- §11.5 of [*Risk Assessment and Decision Analysis with Bayesian Networks*](references.html)
:::
::::

\

- **Multi-agent problems**. To some extent it is possible to consider situations (such as games) with several agents having different and even opposing utilities. This area of Decision Theory is apparently still under development.

::::{.small}
::: {.callout-tip}
## {{< fa rocket >}} For the extra curious
- Chapter 17 of [*Artificial Intelligence*](references.html)
:::
::::






